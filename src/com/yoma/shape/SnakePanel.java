/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.yoma.shape;


import com.yoma.domain.*;
import com.yoma.domain.Shape;

import java.awt.*;
import java.util.List;

/**
 *
 * @author aliahmed
 */
public class SnakePanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    private final static int UNIT = 5;

    public SnakePanel() {
        initComponents();
        shape = SnakeBuilder.initShape();
        rat = SnakeBuilder.initRat(shape.getItems());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private Shape shape;
    private Rat rat;
    private boolean crashed;
    private boolean stop;


    public void paint(Graphics graphics) {
        if (this.crashed || this.stop) {
            return;
        }
        System.out.println(getWidth());
        System.out.println(getHeight());
        graphics.setColor(Color.YELLOW);
        graphics.fillRect(0, 0, getWidth(), getHeight());
        graphics.setColor(Color.BLUE);
        graphics.fillRect(rat.getX(), rat.getY(), SnakePanel.UNIT, SnakePanel.UNIT);
        List<ShapeItem> items = shape.getItems();
        ShapeItem item = null;
        for (int i = items.size()-1; i >= 0; i--) {
            item = items.get(i);
            //System.out.println(""+item.getX()+" "+item.getY()+" "+item.getDirection());
            if (i == 0) {
                graphics.setColor(Color.GREEN);
                graphics.fillRect(item.getX(), item.getY(), SnakePanel.UNIT, SnakePanel.UNIT);
            } else {
                graphics.setColor(Color.RED);
                graphics.fillRect(item.getX(), item.getY(), SnakePanel.UNIT, SnakePanel.UNIT);
            }
        }
        if (this.detectCollision(shape.getItems())) {
            graphics.setColor(Color.BLACK);
            graphics.fill3DRect(0, 0, 20, 20, true);
            this.crashed = true;
        }
    }

    public void moveUp() {
        shape.moveUp(this);
        this.repaint();
    }

    public void moveDown() {
        shape.moveDown(this);
        this.repaint();
    }

    public void moveLeft() {
        shape.moveLeft(this);
        this.repaint();
    }

    public void moveRight() {
        shape.moveRight(this);
        this.repaint();
    }

    public void moveSnake() {
        if(this.isCrashed() || this.isStop())
            return;
        ShapeItem shapeItem = shape.getItems().get(0);
        if(shapeItem.getDirection().ordinal() == Direction.UP.ordinal()){
            this.moveUp();
        }else if(shapeItem.getDirection().ordinal() == Direction.DOWN.ordinal()){
            this.moveDown();
        }else if(shapeItem.getDirection().ordinal() == Direction.RIGHT.ordinal()){
            this.moveRight();
        }else if(shapeItem.getDirection().ordinal() == Direction.LEFT.ordinal()){
            this.moveLeft();
        }
    }

    private boolean detectCollision(List<ShapeItem> items) {
        ShapeItem firstItem = items.get(0);
        for (int i=1;i<items.size();i++){
            if(firstItem.getX()==items.get(i).getX()
                    && firstItem.getY()==items.get(i).getY()){
                return true;
            }
        }
        return false;
    }

    public Shape getShape() {
        return shape;
    }

    public void setShape(Shape shape) {
        this.shape = shape;
    }

    public Rat getRat() {
        return rat;
    }

    public void setRat(Rat rat) {
        this.rat = rat;
    }

    public boolean isCrashed() {
        return crashed;
    }

    public void setCrashed(boolean crashed) {
        this.crashed = crashed;
    }
    private int score = 0;

    public int getScore() {
        return score;
    }

    public void setScore(int score) {
        this.score = score;
    }

    public boolean isStop() {
        return stop;
    }

    public void setStop(boolean stop) {
        this.stop = stop;
    }

    public void raiseScore() {
        this.score += 5 ;

    }

    public void stopOrPlay() {
        this.stop = !stop;
    }
}
